(defn pow (x y)
  (eval (cons * (make-list y x)))
)

(defn rem (x y)
  (- x (* (/ x y) y))
)

(defn even (x)
  (= 0 (rem x 2)) 
)

(defn odd (x)
  (not (even x))
)

(defn -
  ((x) (negate x))
  ((x +rest) (eval (append-list '(+ x) (map negate rest))))
)

(defn /
  ((x) (invert x))
  ((x +rest) (eval (append-list '(* x) (map invert rest))))
)
